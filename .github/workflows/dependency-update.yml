name: 📦 Dependency Updates

on:
  schedule:
    # 每周一早上8点检查依赖更新
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - patch
          - minor

env:
  NODE_VERSION: '18'

jobs:
  # 检查依赖更新
  check-updates:
    name: 🔍 Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      security-updates: ${{ steps.check.outputs.security-updates }}
      update-summary: ${{ steps.check.outputs.update-summary }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Check for outdated packages
        id: check
        run: |
          # 检查过期的包
          npm outdated --json > outdated.json || true
          
          # 检查安全漏洞
          npm audit --json > audit.json || true
          
          # 分析结果
          HAS_UPDATES=false
          SECURITY_UPDATES=false
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            HAS_UPDATES=true
          fi
          
          if [ -s audit.json ]; then
            VULNERABILITIES=$(node -p "
              try {
                const audit = JSON.parse(require('fs').readFileSync('audit.json', 'utf8'));
                audit.metadata?.vulnerabilities?.total || 0;
              } catch(e) { 0 }
            ")
            if [ "$VULNERABILITIES" -gt 0 ]; then
              SECURITY_UPDATES=true
            fi
          fi
          
          echo "has-updates=$HAS_UPDATES" >> $GITHUB_OUTPUT
          echo "security-updates=$SECURITY_UPDATES" >> $GITHUB_OUTPUT
          
          # 生成更新摘要
          cat > update-summary.md << EOF
          ## 📦 依赖更新检查报告
          
          **检查时间**: $(date)
          **更新类型**: ${{ github.event.inputs.update_type || 'scheduled' }}
          
          ### 📊 统计信息
          - 过期包数量: $(node -p "Object.keys(JSON.parse(require('fs').readFileSync('outdated.json', 'utf8')) || {}).length")
          - 安全漏洞数量: $VULNERABILITIES
          
          EOF
          
          if [ "$HAS_UPDATES" = "true" ]; then
            echo "### 📋 过期包列表" >> update-summary.md
            node -p "
              const outdated = JSON.parse(require('fs').readFileSync('outdated.json', 'utf8')) || {};
              Object.entries(outdated).map(([pkg, info]) => 
                \`- **\${pkg}**: \${info.current} → \${info.latest}\`
              ).join('\n')
            " >> update-summary.md
          fi
          
          if [ "$SECURITY_UPDATES" = "true" ]; then
            echo "### 🔒 安全漏洞" >> update-summary.md
            node -p "
              try {
                const audit = JSON.parse(require('fs').readFileSync('audit.json', 'utf8'));
                if (audit.vulnerabilities) {
                  Object.entries(audit.vulnerabilities).map(([pkg, vuln]) => 
                    \`- **\${pkg}**: \${vuln.severity} - \${vuln.title}\`
                  ).join('\n');
                } else {
                  '检测到安全漏洞，请运行 npm audit 查看详情';
                }
              } catch(e) {
                '无法解析安全审计结果';
              }
            " >> update-summary.md
          fi
          
          echo "update-summary<<EOF" >> $GITHUB_OUTPUT
          cat update-summary.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📤 Upload reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            outdated.json
            audit.json
            update-summary.md

  # 自动安全更新
  security-updates:
    name: 🔒 Security Updates
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.security-updates == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 🔒 Apply security updates
        run: |
          # 自动修复安全漏洞
          npm audit fix --force
          
          # 更新lib目录的依赖
          cd lib
          npm audit fix --force || true

      - name: 🧪 Run tests after security updates
        run: |
          npm ci
          npm run test
          npm run build

      - name: 📝 Create security update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'fix: apply security updates'
          title: '🔒 Security Updates - Automated'
          body: |
            ## 🔒 自动安全更新
            
            此PR包含自动应用的安全更新，用于修复检测到的安全漏洞。
            
            ### 📋 更改内容
            - 自动修复安全漏洞
            - 更新受影响的依赖包
            
            ### ✅ 验证状态
            - [x] 测试通过
            - [x] 构建成功
            - [x] 安全扫描通过
            
            ### 📊 详细报告
            ${{ needs.check-updates.outputs.update-summary }}
            
            ---
            *此PR由GitHub Actions自动创建*
          branch: security-updates
          delete-branch: true

  # 创建依赖更新PR
  create-update-pr:
    name: 📋 Create Update PR
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has-updates == 'true' && github.event.inputs.update_type != 'security'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 📥 Download reports
        uses: actions/download-artifact@v3
        with:
          name: dependency-reports

      - name: 📦 Update dependencies
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
          
          case $UPDATE_TYPE in
            "patch")
              # 只更新补丁版本
              npm update --save
              ;;
            "minor")
              # 更新次版本（包括补丁）
              npx npm-check-updates -u --target minor
              npm install
              ;;
            "all")
              # 更新所有版本
              npx npm-check-updates -u
              npm install
              ;;
          esac
          
          # 更新lib目录的依赖
          cd lib
          case $UPDATE_TYPE in
            "patch")
              npm update --save
              ;;
            "minor")
              npx npm-check-updates -u --target minor
              npm install
              ;;
            "all")
              npx npm-check-updates -u
              npm install
              ;;
          esac

      - name: 🧪 Test updated dependencies
        run: |
          npm ci
          npm run lint
          npm run type-check
          npm run test
          npm run build

      - name: 📝 Create dependency update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (${{ github.event.inputs.update_type || 'patch' }})'
          title: '📦 Dependency Updates - ${{ github.event.inputs.update_type || 'Patch' }}'
          body: |
            ## 📦 依赖更新
            
            此PR包含依赖包的更新，更新类型: **${{ github.event.inputs.update_type || 'patch' }}**
            
            ### ✅ 验证状态
            - [x] 代码检查通过
            - [x] 类型检查通过
            - [x] 测试通过
            - [x] 构建成功
            
            ### 📊 更新报告
            ${{ needs.check-updates.outputs.update-summary }}
            
            ### 🔍 审查建议
            1. 检查是否有破坏性更改
            2. 验证新功能是否正常工作
            3. 确认性能没有回退
            
            ---
            *此PR由GitHub Actions自动创建*
          branch: dependency-updates-${{ github.event.inputs.update_type || 'patch' }}
          delete-branch: true

  # 通知
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [check-updates, security-updates, create-update-pr]
    if: always()
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 📦 依赖更新检查结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check-updates.outputs.has-updates }}" == "true" ]; then
            echo "✅ 发现可用更新" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ 所有依赖都是最新的" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.check-updates.outputs.security-updates }}" == "true" ]; then
            echo "⚠️ 发现安全漏洞，已创建修复PR" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔒 没有发现安全漏洞" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.check-updates.outputs.update-summary }}" >> $GITHUB_STEP_SUMMARY

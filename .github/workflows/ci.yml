name: 🔄 PDCS-Fronted-UI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'pdcs-fronted-ui'

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔑 Generate cache key
        id: cache-key
        run: echo "key=${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📝 TypeScript type check
        run: npm run type-check

      - name: 🔍 ESLint check
        run: npm run lint

      - name: 🎨 Prettier format check
        run: npx prettier --check .

  # 单元测试
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 20
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 构建测试
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    outputs:
      build-cache-key: ${{ steps.build-cache.outputs.key }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build main application
        run: npm run build

      - name: 📦 Build component library
        run: |
          cd lib
          npm ci
          npm run build

      - name: 🔑 Generate build cache key
        id: build-cache
        run: echo "key=${{ env.CACHE_KEY_PREFIX }}-build-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 💾 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .next
            lib/dist
          key: ${{ steps.build-cache.outputs.key }}

  # 安全扫描
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 部署到开发环境
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 💾 Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            .next
            lib/dist
          key: ${{ needs.build.outputs.build-cache-key }}

      - name: 🚀 Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}

  # 部署到生产环境
  deploy-prod:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 💾 Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            .next
            lib/dist
          key: ${{ needs.build.outputs.build-cache-key }}

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
